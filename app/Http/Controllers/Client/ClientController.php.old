<?php

namespace App\Http\Controllers\Client;

use App\Http\Controllers\Controller;
use App\Models\Mdt;
use App\Models\Student;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;

class ClientController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $title = 'NewsWatch Client Dashboard';
        return view('client.dashboard.index',compact('title'));

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function uploadData()
    {
        $students = Student::where("upload",0)->get();
        foreach ($students as $student) {
            $path = public_path("uploads/$student->image");
            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:image/' . $type . ';base64,' . base64_encode($data);
//            dd($base64);
            if ($student->gender == 1){
                $gender = "male";
            }else{
                $gender = "female";
            }
            $data = "{

	\"groupId\": \"DA640D7CE7544B33A3A1C81CD95D3E66\",

	\"userId\": \"$student->id\",

	\"name\": \"$student->full_name\",

	\"age\": 30,

	\"gender\": \"$gender\",

	\"phone\": \"$student->phone\",

	\"email\": \"$student->email\",

	\"certificateType\": 111,

	\"certificateNumber\": \"$student->student_id\",

	\"updateTime\": \"20200331123025\",

	\"images\": [

		{

			\"data\": \"$base64\"

		}

	],

	\"accessInfo\": {

		\"cardNum\": \"\",

		\"password\": \"\",

		\"authType\": 0,

		\"roleType\": 0

	}

}";

            $curl = curl_init();


            $headers = array(
//            "Authorization: Bearer ".$settings['quip_token'],
                'Content-type: multipart/form-data'
            );

            $url = "http://47.180.21.40:80/api/v1/face/addPerson";



            curl_setopt($curl, CURLOPT_VERBOSE, false);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($curl, CURLOPT_HEADER, false);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
            $response= curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
                Log::error("cURL Error #:" . $err);

            }
            $response = json_decode($response);
            if($response){

                if ($response->status == 0){
                    $student->upload = 1;
                    $student->return_id = $response->data->personId;
                    $student->save();
                }

            }


        }


    }

    public function blackList()
    {
        $students = Student::where("upload",1)->get();
        $ids = array();

        foreach ($students as $student) {
            array_push($ids,"$student->id");
        }
        $data = json_encode($ids);
        $data = "{

    \"data\": $data

}";
        $mdts  = Mdt::all();
        foreach ($mdts as $mdt) {
            $curl = curl_init();


            $headers = array(
//            "Authorization: Bearer ".$settings['quip_token'],
                'Content-type: multipart/form-data'
            );

            $url = "http://$mdt->ip_address:$mdt->https_port/api/v1/face/setBlacklist";



            curl_setopt($curl, CURLOPT_VERBOSE, false);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($curl, CURLOPT_HEADER, false);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
            $response= curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
                Log::error("cURL Error #:" . $err);

            }
            $response = json_decode($response);

        }
        if($response){

            if ($response->status == 0){
                foreach ($students as $std) {
                    $student = Student::find($std->id);
                    $student->black_list = 1;
                    $student->save();
                }

            }

        }

    }



    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit()
    {
        $user = Auth::user();
        return view('client.settings.edit', ['title' => 'Edit Profile','user'=>$user]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {
        $admin = Auth::user();
        $this->validate($request, [
            'name' => 'required|max:255',
            'email' => 'required|unique:users,email,'.$admin->id,
        ]);
        $input = $request->all();
        if (empty($input['password'])) {
            $input['password'] = $admin->password;
        } else {
            $input['password'] = bcrypt($input['password']);
        }
        $admin->fill($input)->save();
        Session::flash('success_message', 'Great! Client successfully updated!');
        return redirect()->back();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
